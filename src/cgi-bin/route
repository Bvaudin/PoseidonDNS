#!/usr/bin/python2.7
import commands, os, random

base_query = [" iptables --table nat -I PREROUTING --protocol tcp --source ip_addr --dport 53 --jump REDIRECT --to-port 531\n"]
base_query += [" iptables --table nat -I PREROUTING --protocol udp --source ip_addr --dport 53 --jump REDIRECT --to-port 531\n"]


base_query_str = """
# Generated by iptables-save v1.6.0 on Sun Sep 15 15:40:06 2019
*nat
:PREROUTING ACCEPT [5:236]
:INPUT ACCEPT [5:236]
:OUTPUT ACCEPT [64:4626]
:POSTROUTING ACCEPT [64:4626]
{loop_str}
-A PREROUTING -p tcp -m tcp --dport 53 -j REDIRECT --to-port 532
-A PREROUTING -p udp -m udp --dport 53 -j REDIRECT --to-port 532
COMMIT
# Completed on Sun Sep 15 15:40:06 2019
"""


mkscript = "#!/bin/bash\n\n"
mkscript += "touch ./ips/%s\n"%os.environ['REMOTE_ADDR']
rand_int = 35
rand_name = random.randint(10000,20000)
with open("rand_ref", "r") as f:
	rand_int = int(f.read())

'''
 This was replaced with runScreen1.py because running conntrack at each request is costly and useless
 because the requests are not sequential and we pass multiple IPs at any giving moment with 'find'
 you end up trying to delete the expectation for the same IP several times, having an independant 
 script that do that periodically is much more cost-efficiant

mkscript += "if [  $(( RANDOM % 100 )) -gt 80 ]\nthen\n"
mkscript += "cd ./ips && find * -mmin +%d -exec  conntrack -D -s {} > /dev/null \\; && find * -mmin +%d -exec rm -f {} \\; && cd ../\n"%(rand_int,rand_int)
mkscript += "fi\n"
'''
white_list = ','.join(os.listdir("./ips/")) + ',' + os.environ['REMOTE_ADDR']
white_listx = white_list[1:] if white_list[0]=="," else white_list
white_list = white_listx
rules_str = ""
for i in os.listdir("./ips/") + [os.environ['REMOTE_ADDR']]:
	rules_str += "-A PREROUTING -s %s/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports 531\n"%i

rules_path = "./tmp/script_%d.rules"%rand_name
with open(rules_path, "w") as f:
	f.write(base_query_str.replace("{loop_str}", rules_str))

'''
	This was replaced with runScreen2.py
mkscript += "cat %s |  iptables-restore\n"%rules_path
'''

mkscript += " conntrack -D -s %s > /dev/null\n"%os.environ['REMOTE_ADDR']
mkscript += "rm -f -- \"$0\"\n"
script_path = "./tmp/script_%d.sh"%rand_name
with open(script_path, "w") as f:
	f.write(mkscript)


os.system("sh %s &"%script_path)

#print "Access-Control-Allow-Origin: *\n"
print "Content-type:text/html\r\n\r\n"
print '<html>'
print '<head>'
print '<title>Mainroute controller</title>'
print '</head>'
print '<body>'
print '<p>Mainroute controller : OK</p>'
print '</body>'
print '</html>'



